<?php

/**
 * @file
 * A module that include content box with different icons.
 *
 * Maintainer: http://www.developmenticon.com/
 * Written by Himanshu Shakhar (developmenticon)
 */

function fanciblock_config_info() {
  $prefixes['fanciblock.settings'] = array(
    'label' => t('Fanciblock settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 *  Implementation of hook_cron()
 *  
 *  Deletes unused fanciblock settings. Fanciblocks are added via Layout builder
 *  and their settings are saved in hook_block_save to fanciblock.settings.json.
 *  
 *  When a block is removed from Layout builder, there is no way to tell this
 *  happened immediately. This may change; see https://github.com/backdrop/backdrop-issues/issues/767.
 *  
 *  Until then this checks for removed layout blocks to delete their settings on 
 *  cron run.
 *  
 */
function fanciblock_cron() {
  $all_layouts = layout_get_all_configs('layout');
  $layouts = array();
  foreach($all_layouts as $layout_name => $active_layouts) {
    foreach($active_layouts['content'] as $uuid => $block) {
      if($block['data']['module'] == 'fanciblock') {
        $layouts[] = $block['data']['settings']['block_settings']['fanciblock_name'];
      }
    }
  }
  $settings = config('fanciblock.settings');
  $data = $settings->get();
  foreach($data as $key => $setting) {
    if(is_null($setting) || (is_array($setting) && !in_array($key, $layouts))) {
      unset($data[$key]);
    }
  }
  $settings->setData($data);
  $settings->save();
}


/**
 * Implements hook_permission().
 */
function fanciblock_permission() {
  $perms = array(
    'administer fanciblock' => array(
      'title' => t('Administer Icon Box'),
      'restrict access' => TRUE,
    ),
  );
  return $perms;
}

function fanciblock_library_info() {
  // Library One.
  $libraries['fontawesome'] = array(
    'title' => 'Font Awesome',
    'website' => 'http://fortawesome.github.com/Font-Awesome/',
    'version' => '1.2',
    'css' => array(
      backdrop_get_path('module', 'fanciblock') . '/fontawesome/css/font-awesome.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function fanciblock_menu() {

  //List box.
  $items['admin/config/media/fanciblocks'] = array(
    'title' => 'List all Fanciblocks',
    'page callback' => 'fanciblock_overview_page',
    'access arguments' => array('administer fanciblock'),
    'file' => 'fanciblock.admin.inc',
  );
  //List box.
  $items['admin/config/media/fanciblocks/%layout/%'] = array(
    'title' => 'List Box',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('fanciblock_box_overview_form', 4, 5),
    'access arguments' => array('administer fanciblock'),
    'file' => 'fanciblock.box.admin.inc',
  );
  //Edit box.
  $items['admin/config/media/fanciblocks/%layout/%/%/edit'] = array(
    'title' => 'Edit box',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('fanciblock_box_edit_box', 'edit', 4, 5, 6),
    'access arguments' => array('administer fanciblock'),
    'file' => 'fanciblock.box.admin.inc',
  );
  //Delete box.
  $items['admin/config/media/fanciblocks/%layout/%/%/delete'] = array(
    'title' => 'Delete box',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('fanciblock_box_delete_box', 4, 5, 6),
    'access arguments' => array('administer fanciblock'),
    'file' => 'fanciblock.box.admin.inc',
  );
  return $items;
}

/**
 *  Implements hook_menu_contextual_links_alter
 *  
 *  Adds links for editing individual fanciblock boxes to the main fanciblock
 *  contextual links menu. 
 */
function fanciblock_menu_contextual_links_alter(&$links, $router_item, $root_path) {
  if ($root_path == 'admin/structure/layouts/manage/%') {
    $uuid = $router_item['page_arguments'][3];
    $layout = $router_item['page_arguments'][1];
    $block = $layout->content[$uuid];
    if($block->module == 'fanciblock'){
      $config = $block->settings['fanciblock_settings']['box_settings'];
      if($config) {
        foreach($config as $box) {
          $links['fb' . $box['boxid']] = array(
            'title' => 'Edit ' . $box['box_title'],
            'href' => 'admin/config/media/fanciblocks/' . $layout->name . '/' . $uuid . '/' . $box['boxid'] . '/edit',
            'localized_options' => array(),
          );
        }
        $links['ls-reorder'] = array(
          'title' => 'Re-order',
          'href' => 'admin/config/media/fanciblocks/' . $layout->name . '/' . $uuid,
          'localized_options' => array(),
        );
      }
      
    }
  }
}

/**
 * Implements hook_theme().
 */
function fanciblock_theme() {
  return array(
    'fanciblock_admin_overview' => array(
      'file' => 'fanciblock.admin.inc',
      'variables' => array('title' => NULL, 'name' => NULL),
    ),
    'fanciblock_box_overview_form' => array(
      'file' => 'fanciblock.box.admin.inc',
      'render element' => 'form',
    ),
    'fanciblock_fontawesome_icon_build' => array(
      'file' => 'fanciblock.box.admin.inc',
      'variables' => array('class' => NULL, 'size' => NULL, 'style' => NULL, 'looks' => NULL, 'color' => NULL),
    ),
    'fanciblock_horizontal' => array(
      'variables' => array('fanciblock_data' => NULL, 'settings' => NULL, 'preview' => FALSE),
      'template' => 'theme/fanciblock-horizontal',
      'preprocess functions' => array('template_preprocess_fanciblock_content'),
      'file' => 'theme/fanciblock.theme.inc',
    ),
    'fanciblock_vertical' => array(
      'variables' => array('fanciblock_data' => NULL, 'settings' => NULL, 'preview' => FALSE),
      'template' => 'theme/fanciblock-vertical',
      'preprocess functions' => array('template_preprocess_fanciblock_content'),
      'file' => 'theme/fanciblock.theme.inc',
    ),
  );
}


/**
 * Title callback for the fanciblock overview page.
 */
function fanciblock_overview_title($fanciblock) {
  return $fanciblock['title'];
}


/**
 * Save a fanciblock box.
 *
 * @param $box
 *   An array representing a fanciblock box:
 *   - boxid: The unique id of the box
 *   - fanciblock_name: The parent fanciblock name.
 *   - box_title: The human readable box title.
 *   - weight: The box order value.
 *   - fontawesome_icon: The font awesome icon.
 *   - box_content: The box content.
 */
function fanciblock_box_save($fanciblock_name, $box, $layout_name, $uuid) {
  $layout = 'layout.layout.' . $layout_name;
  $config = config($layout);
  $config_path = 'content.' . $uuid . '.data.settings.fanciblock_settings.box_settings.' . $box['boxid']; 
  $config->set($config_path, $box);
  $config->save();
  layout_reset_caches();
}

/**
 * Implements hook_block_info().
 */
function fanciblock_block_info() {
  $blocks = array();
  $blocks['fanciblock']['info'] = t('Fanciblock image');
  $blocks['fanciblock']['description'] = t('Fanciblock image');
  $blocks['fanciblock']['class'] = 'FanciblockClass';
  
  $blocks['fanciicon']['info'] = t('Fanciblock icon');
  $blocks['fanciicon']['description'] = t('Fanciblock icon');
  $blocks['fanciicon']['class'] = 'FanciblockClass';
  return $blocks;
}

function _fanciblock_add_default_boxes($number, $default_box, $delta) {  
  $boxes = array();
  $i = 1;
  while($i <= $number) {
    $id = uniqid();
    // Set the box title.
    $default_box['boxid'] = $i . $id;
    $default_box['box_title'] = $default_box['fanciblock_name'] . $i;
    $default_box['fanciblock_type'] = (string) $delta;
    $boxes[$i . $id] = $default_box;
    $i++;
  }
  return $boxes;
}

/**
 * Implements hook_block_view().
 */
function fanciblock_block_view($delta = '', $settings = array(), $contexts = array()) {
  if ($delta == 'fanciblock' || $delta == 'fanciicon') {
    $fanciblock = fanciblock_get_settings($settings['fanciblock_name']);
    // Block settings stay in Layout even if the module is unintalled, and cause
    // white-screen on view. So dont show anything unless we find a config file.
    if($fanciblock) {
      $data['subject'] = NULL;
      // THis adds the a fake link in the fanciblock menu so that we can identify it.
      // See hook_menu for details.
      $data['content'] =  array(
        '#markup' => fanciblock_load_fanciblocks($delta, $settings),
        '#contextual_links' => array(
          'fanciblock' => array('fanciblock/stub', array($settings['fanciblock_name'])),
        ),
      );
      return $data;
    }
  }
}


/**
 * Load fanciblock and all contained boxes.
 *
 * @return
 *   Array of fanciblock with contained boxes data.
 */
function fanciblock_load_fanciblocks($delta, $settings) {
  // Load the config file.
  $boxes = $settings['fanciblock_settings']['box_settings'];
  
  backdrop_add_css(backdrop_get_path('module', 'fanciblock') . '/fontawesome/css/font-awesome.css'); // add library fontawesome.css
  backdrop_add_css(backdrop_get_path('module', 'fanciblock') . '/css/fanciblock.css'); // add css
  backdrop_add_js(backdrop_get_path('module', 'fanciblock') . '/js/fanciblock.js'); // add js
  
  $settings = _flatten_fanciblock_settings($settings['fanciblock_settings']);
  dpm($settings);
  $settings['delta'] = $delta;
  if($settings['icon-position'] == 'right' || $settings['icon-position'] == 'left') {
    return theme('fanciblock_horizontal', array('fanciblock_data' => $boxes, 'settings' => $settings, 'preview' => FALSE));
  }
  elseif($settings['icon-position'] == 'top' || $settings['icon-position'] == 'boxcut') {
    return theme('fanciblock_vertical', array('fanciblock_data' => $boxes, 'settings' => $settings, 'preview' => FALSE));
  }
}

function _flatten_fanciblock_settings ($settings = array()) {
  $fanciblock = array();
  if($settings) {
    $fanciblock['fanciblock_name']	= $settings['fanciblock_name'];
    $fanciblock['fanciblock_type']	= $settings['fanciblock_type'];
    $fanciblock['grid']						= $settings['grid']['grid'];
    $fanciblock['icon-position']			= $settings['appearance']['icon-position'];
    $fanciblock['icon-style']				= $settings['appearance']['icon-style'];
    $fanciblock['icon-size']				= $settings['appearance']['icon-size'];
    $fanciblock['box-padding']				= $settings['appearance']['box-padding'];
    
    $fanciblock['icon-bg-color']			= $settings['appearance']['icon-bg-color-container']['icon-bg-color'];
    $fanciblock['icon-bg-color-status']			= $settings['appearance']['icon-bg-color-status'];

    $fanciblock['icon-border-status']				= $settings['appearance']['icon-border'];
    $fanciblock['icon-border']				= $settings['appearance']['icon-border-container']['icon-border'];
    $fanciblock['icon-border-width']		= (int)$settings['appearance']['icon-border-container']['icon-border-width'];
    $fanciblock['icon-border-style']		= $settings['appearance']['icon-border-container']['icon-border-style'];
    $fanciblock['icon-border-color']		= $settings['appearance']['icon-border-container']['icon-border-color'];

    $fanciblock['box-bg-color-status']				= $settings['appearance']['box-bg-color-status'];
    $fanciblock['box-bg-color']				= $settings['appearance']['box-bg-container']['box-bg-color'];

    $fanciblock['box-border-status']				= $settings['appearance']['box-border-container']['box-border'];
    $fanciblock['box-border']				= $settings['appearance']['box-border-container']['box-border'];
    $fanciblock['box-border-width']			= (int)$settings['appearance']['box-border-container']['box-border-width'];
    $fanciblock['box-border-style']			= $settings['appearance']['box-border-container']['box-border-style'];
    $fanciblock['box-border-color']			= $settings['appearance']['box-border-container']['box-border-color'];
  }
  return $fanciblock;
}

/**
 * Validate a form element that should have an integer value.
 */
function _fanciblock_validate_positive_integer($element, &$form_state) {
  $value = $element['#value'];
  if (!is_numeric($value) || intval($value) != $value || $value < 0) {
    form_error($element, t('%name must be a positive integer.', array('%name' => $element['#title'])));
  }
}
/**
 * Validate a form element that should have an integer value.
 */
function _fanciblock_validate_name($element, &$form_state) {
  $name = $element['#value'];

  if (!preg_match('/^[a-zA-Z0-9_]+$/u', $name)) {
    form_error($element, t('%name must only contain alphanumeric characters or underscores.', array('%name' => $element['#title'])));
  }
 $keys = array_keys(config_get('fanciblock.settings'));
  if (in_array($name, $keys)) {
    form_error($element, t('%name must be unique.', array('%name' => $element['#title'])));
  }
}

/**
 * Validate a form element that should have an valid color value.
 */
function _fanciblock_validate_color_value($element, &$form_state) {
  $value = $element['#value'];
  // Only accept hexadecimal CSS color strings.
  if (!preg_match('/^#([a-f0-9]{3}){1,2}$/iD', $value) && $value != 'transparent') {
    form_error($element, t('%name must be a valid hexadecimal CSS color value.', array('%name' => $element['#title'])));
  }
}

/**
 * Load all fanciblock data.
 *
 * @return
 *   Array of fanciblock data.
 */
function fanciblock_get_settings($fanciblock_name) {
  return config_get('fanciblock.settings', $fanciblock_name);
}

/**
 * Implements hook_autoload_info().
 *
 * Required to load our custom class.
 */
function fanciblock_autoload_info() {
  return array(
    'FanciblockClass' => 'fanciblock.inc',
  );
}

